Hi, what's up guys? In this blog, we will walk through the HackTheBox challenge "pickle". It's a web challenge built with Flask in the Python language.

This is the webpage given by the server after we request it:

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/15d6d9fb-1e73-4e14-8d34-80945b172fb5/Untitled.png

First, we navigate around the website:

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/3e9eb536-453d-4023-b3a1-8937627511a3/Untitled.png

We noticed that after selecting the first item, we go to the URL:

http://94.237.63.93:36774/view/1

Attempting to change the `1` to a `0` or a `5` crashes the application.

SQL injection tests:

After going through the code provided with the challenge, we see that we have [models.py](http://models.py/) where we select the product_id from the products table:

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/8003f0cb-8a48-42e3-b2fb-ccb4a5c92868/Untitled.png

So, we decide to check if there is a SQL injection vulnerability on this website:

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/a594a114-d501-4f20-98f6-baa19636ab92/Untitled.png

Success! We have some SQL injection! If you're unsure why this works, here is what the SQL query becomes on the server side:

```yaml
SELECT data FROM products WHERE id='' OR id='4â€™

```

**What is `pickle`?**

In Python, the `pickle` module lets you serialize and deserialize data. Essentially, this means that you can convert a Python object into a stream of bytes and then reconstruct it (including the object's internal structure) later in a different process or environment by loading that stream of bytes.

When consulting the [Python docs for `pickle`](https://docs.python.org/3/library/pickle.html), one cannot miss the following warning:

> Warning: The pickle module is not secure. Only unpickle data you trust.
> 

But how does `pickle` work and how do you use it?

This is an example to understand, and this is a link to an article for more information:

https://davidhamann.de/2020/04/05/exploiting-python-pickle/

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/853589cb-228e-4764-9d3f-d0166b7ca93b/Untitled.png

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/75d99a61-022b-4ca2-95f1-d29aa7d05931/Untitled.png

Now we just need our payload:

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/089d6725-0661-4175-865c-f524756a8567/Untitled.png

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/ef7a4518-3e70-498d-8bd3-b6aa9b19846a/Untitled.png

### Constructing the URL [#](https://drt.sh/posts/htb-cop/#constructing-the-url)

Now that we have all the pieces, let's put it together in the web browser. Craft a URL similar to the following and hit enter:

```
# replace <MALICIOUS_PICKLE> with the payload
<http://localhost:1337/view/>' UNION SELECT '<MALICIOUS_PICKLE>

```

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/7d5df744-319e-455d-b99e-2ca31ff6d687/Untitled.png

The broken template is a good sign!

Let's check to see if the exploit works. Go to [http://url](http://url/) /static/flag.txt

!https://prod-files-secure.s3.us-west-2.amazonaws.com/076dece2-1e94-42dd-9e99-95535b6d7e45/aaa15175-b8c1-4d1d-b348-524d7338401e/Untitled.png

Share: https://www.hackthebox.com/achievement/challenge/1756192/395
